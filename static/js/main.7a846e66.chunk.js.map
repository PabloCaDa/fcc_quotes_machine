{"version":3,"sources":["components/Header/Header.js","components/Loader/Loader.js","constants.js","components/Content/QuoteBox/QuoteBox.js","components/Content/Content.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","backgroundColor","color","padding","textAlign","height","transition","Header","react_default","a","createElement","style","Loader","className","role","COLORS","QuoteBox","state","quotes","author","quote","componentDidMount","setTimeout","Object","asyncToGenerator","regenerator_default","mark","_callee","api_quotes","_ref2","wrap","_context","prev","next","fetch","sent","json","_this","setState","chooseQuote","stop","quote_textBox","document","querySelector","classList","add","remove","offsetWidth","styleSheet","styleSheets","rules","index","Math","floor","random","length","setProperty","id","this","components_Loader_Loader","href","onClick","Component","contentStyle","Content","QuoteBox_QuoteBox_QuoteBox","footerStyle","Footer","App","components_Header_Header","components_Content_Content","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a846e66.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst headerStyle = {\r\n    backgroundColor: '#333',\r\n    color: 'var(--main-brand-color)',\r\n    padding: '10px 20px',\r\n    textAlign: 'center',\r\n    height:'10vh',\r\n    transition: 'color 2s'\r\n}\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav style={headerStyle}>\r\n        <h1>Quotes Machine</h1>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"spinner-grow\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","export const COLORS =  [\r\n    '#A1C5AA', '#82BF94', '#E7D27C', '#B46858', '#126D43', '#6BB8A0', '#B9BAB8', '#B98F69', '#C25755', '#BD4948'\r\n]","import React, { Component } from 'react'\r\nimport './QuoteBox.css'\r\n\r\nimport Loader from '../../Loader/Loader'\r\nimport { COLORS } from '../../../constants'\r\n\r\nexport default class QuoteBox extends Component {\r\n    state = {\r\n        quotes: [],\r\n        author: '',\r\n        quote: '',\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        setTimeout( async() => {\r\n            const api_quotes = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n            const {quotes} = await api_quotes.json()\r\n            await this.setState({quotes: quotes})\r\n            await this.chooseQuote()\r\n        }, 1000)\r\n        \r\n    }\r\n\r\n    chooseQuote = () => {\r\n        const quote_textBox = document.querySelector('.fading');\r\n        quote_textBox.classList.add(\"fadeOut\");\r\n        quote_textBox.classList.remove(\"fadeIn\");\r\n        void quote_textBox.offsetWidth;\r\n        const styleSheet = document.styleSheets[2].rules[0].style;\r\n        setTimeout(() => {\r\n            const index = Math.floor(Math.random() * this.state.quotes.length);\r\n            this.setState ({\r\n                quote: this.state.quotes[index].quote,\r\n                author: this.state.quotes[index].author\r\n            }, () => {  \r\n                styleSheet.setProperty('--main-brand-color', COLORS[Math.floor(Math.random() * COLORS.length)])\r\n                quote_textBox.classList.remove(\"fadeOut\");\r\n                quote_textBox.classList.add(\"fadeIn\");\r\n            })\r\n        }, 900)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"row d-flex justify-content-center\">\r\n            <div id=\"quote-box\" className='quote__box d-flex flex-column'>\r\n                <div className=\"d-flex flex-column fading\">\r\n                    <div id=\"quote__text-box\" className=\"d-flex justify-content-center quote__text-container\">\r\n                        {this.state.quotes.length === 0 && <Loader />}\r\n                        {this.state.quote && <i className=\"fas fa-quote-left quote__icon color-trans\"></i>}\r\n                        <span id=\"text\" className=\"quote__text color-trans\">{this.state.quote}</span>\r\n                    </div>\r\n                    <small id=\"author\" className=\"quote__author color-trans\">- {this.state.author}</small>\r\n                </div>\r\n                <div className=\"quote__action d-flex justify-content-between align-items-center\">\r\n                    <div className=\"quotes__action--social\">\r\n                        <a id=\"tweet-quote\" className=\"qoute__button bg-trans\" href=\"twitter.com/intent/tweet\">\r\n                            <i className=\"fab fa-twitter\"></i>\r\n                        </a>\r\n                        <a className=\"qoute__button quote__button--tumblr\" href=\"https://www.tumblr.com/share\">\r\n                            <i className=\"fab fa-tumblr\"></i>\r\n                        </a>\r\n                    </div>\r\n                    <button id=\"new-quote\" className=\"qoute__button bg-trans\" onClick={this.chooseQuote}>New Quote</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport QuoteBox from './QuoteBox/QuoteBox'\r\n\r\nconst contentStyle = {\r\n    height:'80vh',\r\n    backgroundColor: 'var(--main-brand-color)',\r\n    color: 'var(--main-brand-color)'\r\n    \r\n}\r\n\r\nconst Content = () => {\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center align-items-center bg-trans\" style={contentStyle}>\r\n      <QuoteBox></QuoteBox>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\n\r\nconst footerStyle = {\r\n    backgroundColor: '#333',\r\n    color: 'var(--main-brand-color)',\r\n    padding: '10px 20px',\r\n    textAlign: 'center',\r\n    height:'10vh'\r\n}\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"color-trans\" style={footerStyle}>\r\n      <h4>Created by <i className=\"far fa-copyright\"></i> Pablo Cabrera Darias</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react';\nimport './App.css'\n\nimport Header from './components/Header/Header'\nimport Content from './components/Content/Content'\nimport Footer from './components/Footer/Footer'\n\nclass App extends Component {\n  state = {\n\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Content/>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}